package ppl;

import ppl.Executable;

public class example extends Executable {
    public example() {
        super(new Instr []
              { loads("lena.pgm")
              , store(absAddr,1)
              , loads("hello world")
              , svc(writeln)
              , pop()
              , loads("reading ")
              , load(absAddr,1)
              , compute(concs)
              , svc(writeln)
              , pop()
              , load(absAddr,1)
              , svc(load)
              , store(absAddr,0)
              , loads("width  = ")
              , load(absAddr,0)
              , compute(width)
              , compute(i2s)
              , compute(concs)
              , svc(writeln)
              , pop()
              , loads("height = ")
              , load(absAddr,0)
              , compute(height)
              , compute(i2s)
              , compute(concs)
              , svc(writeln)
              , pop()
              , loads("storing picture")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loads("original.pgm")
              , svc(store)
              , pop()
              , loads("flip horizontal")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(flipHorizontal)
              , loads("flipHorizontal.pgm")
              , svc(store)
              , pop()
              , loads("flip vertical")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(flipVertical)
              , loads("flipVertical.pgm")
              , svc(store)
              , pop()
              , loads("flip diagonal")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(flipDiagonal)
              , loads("flipDiagonal.pgm")
              , svc(store)
              , pop()
              , loads("rotate")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(rotate)
              , loads("rotate.pgm")
              , svc(store)
              , pop()
              , loads("shift")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(width)
              , loadi(4)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(4)
              , compute(divi)
              , compute(shift)
              , loads("shift.pgm")
              , svc(store)
              , pop()
              , loads("gamma 0.5")
              , svc(writeln)
              , pop()
              
              , load(absAddr,0)
              , loadf((float)(0.5)) 
              
              , compute(gamma)
              , loads("gamma0.5.pgm")
              , svc(store)
              , pop()              
              , loads("gamma 2.0")
              , svc(writeln)
              , pop()
              
              
              , load(absAddr,0)              
              , loadf((float)(2.0)) 
              
              , compute(gamma)
              , loads("gamma2.0.pgm")
              , svc(store)
              , pop()
              , loads("invert")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(invert)
              , loads("invert.pgm")
              , svc(store)
              , pop()
              , loads("bitmap")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(bitmap)
              , loads("bitmap.pgm")
              , svc(store)
              , pop()
              , loads("black and white")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(blackAndWhite)
              , loads("blackAndWhite.pgm")
              , svc(store)
              , pop() //123              
              , loadi(2)	///
              , store(absAddr,2)
              , jump(21)
              , loads("reduce # of colors to ")
              , load(absAddr,2)
              , compute(i2s)
              , compute(concs)
              , svc(writeln)
              , pop()
              
              
              , load(absAddr,0)
              , load(absAddr,2)  
              
              , compute(reduceColor)
              , loads("reduce")
              , load(absAddr,2)
              , compute(i2s)
              , compute(concs)
              , loads(".pgm")
              , compute(concs)
              , svc(store)
              , pop()
              , load(absAddr,2)
              , compute(incri)
              , store(absAddr,2)
              , loadi(8)
              , load(absAddr,2)
              , compute(gti)
              , branch(true,-23) ///
              , undef()
              , store(absAddr,2)
              , loads("cut")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(width)
              , loadi(4)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(4)
              , compute(divi)
              , load(absAddr,0)
              , compute(width)
              , loadi(2)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(2)
              , compute(divi)
              , compute(cut)
              , loads("cut.pgm")
              , svc(store)
              , pop()
              , loads("paste")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(width)
              , loadi(2)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(2)
              , compute(divi)
              , compute(resize)
              , compute(invert)
              , load(absAddr,0)
              , compute(width)
              , loadi(4)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(4)
              , compute(divi)
              , compute(paste)
              , loads("paste.pgm")
              , svc(store)
              , pop()
              , loads("scale2x2")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , loadi(2)
              , compute(scale)
              , loads("scale2x2.pgm")
              , svc(store)
              , pop()
              , loads("scale2x1")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , loadi(1)
              , compute(scale)
              , loads("scale2x1.pgm")
              , svc(store)
              , pop()
              , loads("scale1x2")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(1)
              , loadi(2)
              , compute(scale)
              , loads("scale1x2.pgm")
              , svc(store)
              , pop()
              , loads("replicate2x2")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , loadi(2)
              , compute(replicate)
              , loads("replicate2x2.pgm")
              , svc(store)
              , pop()
              , loads("replicate2x1")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , loadi(1)
              , compute(replicate)
              , loads("replicate2x1.pgm")
              , svc(store)
              , pop()
              , loads("replicate1x2")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(1)
              , loadi(2)
              , compute(replicate)
              , loads("replicate1x2.pgm")
              , svc(store)
              , pop()
              , loads("double size")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , load(absAddr,0)
              , compute(width)
              , compute(muli)
              , loadi(2)
              , load(absAddr,0)
              , compute(height)
              , compute(muli)
              , compute(resize)
              , loads("doublesize.pgm")
              , svc(store)
              , pop()
              , loads("double size in 2 steps")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(width)
              , loadi(2)
              , compute(divi)
              , compute(addi)
              , load(absAddr,0)
              , compute(height)
              , load(absAddr,0)
              , compute(height)
              , loadi(2)
              , compute(divi)
              , compute(addi)
              , compute(resize)
              , loadi(2)
              , load(absAddr,0)
              , compute(width)
              , compute(muli)
              , loadi(2)
              , load(absAddr,0)
              , compute(height)
              , compute(muli)
              , compute(resize)
              , loads("doublesize2.pgm")
              , svc(store)
              , pop()
              , loads("half size")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(width)
              , loadi(2)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(2)
              , compute(divi)
              , compute(resize)
              , loads("halfsize.pgm")
              , svc(store)
              , pop()
              , loads("sideBySide")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(sideBySide)
              , loads("sideBySide.pgm")
              , svc(store)
              , pop()
              , loads("above")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipHorizontal)
              , compute(above)
              , loads("above.pgm")
              , svc(store)
              , pop()
              , loads("mirror: sideBySide and above")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(sideBySide)
              , dup()
              , dup()
              , store(absAddr,2)
              , compute(flipHorizontal)
              , compute(above)
              , loads("mirror.pgm")
              , svc(store)
              , pop()
              /**/, undef()
              , store(absAddr,2)
              , loads("select all even/odd columns")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , compute(partitionVertical)
              , dup()
              , store(absAddr,2)
              , loadi(0)
              , compute(indexl)
              , load(absAddr,2)
              , loadi(1)
              , compute(indexl)
              , store(absAddr,4)
              , dup()
              , store(absAddr,3)
              , loads("evencols.pgm")
              , svc(store)
              , pop()
              , load(absAddr,4)
              , loads("oddrcols.pgm")
              , svc(store)
              , pop()
              , loads("1 step vertical wavelet transformation")
              , svc(writeln)
              , pop()
              , load(absAddr,3)
              , load(absAddr,3)
              , compute(mean)
              , load(absAddr,3)
              , load(absAddr,4)
              , compute(diff)
              , compute(sideBySide)
              , loads("waveV.pgm")
              , svc(store)
              , pop()
              , undef()
              , store(absAddr,2)
              , undef()
              , store(absAddr,3)
              , undef()
              , store(absAddr,4)/****/
              /**/, loads("select all even/odd rows")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , loadi(2)
              , compute(partitionHorizontal)
              , dup()
              , store(absAddr,2)
              , loadi(0)
              , compute(indexl)
              , load(absAddr,2)
              , loadi(1)
              , compute(indexl)
              , store(absAddr,4)
              , dup()
              , store(absAddr,3)
              , loads("evenrows.pgm")
              , svc(store)
              , pop()
              , load(absAddr,4)
              , loads("oddrrows.pgm")
              , svc(store)
              , pop()/**/
              , loads("1 step horizontal wavelet transformation")
              , svc(writeln)
              , pop()
              /**/, load(absAddr,3)
              , load(absAddr,3)
              , compute(mean)
              , load(absAddr,3)
              , load(absAddr,4)
              , compute(diff)
              , compute(above)
              , loads("waveH.pgm")
              , svc(store)
              , pop()/**/
              , undef()
              , store(absAddr,2)
              , undef()
              , store(absAddr,3)
              , undef()
              , store(absAddr,4)
              , loads("black")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(height)
              , compute(black)
              , loads("black.pgm")
              , svc(store)
              , pop()
              , loads("white")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(height)
              , compute(white)
              , loads("white.pgm")
              , svc(store)
              , pop()
              , loads("grey 0.5")
              , svc(writeln)
              , pop()
              , loadf((float)(0.5))
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(height)
              , compute(grey)
              , loads("grey0.5.pgm")
              , svc(store)
              , pop()
              /**/, loads("merge pictures vertical")
              , svc(writeln)
              , pop()
              , emptyl()
              , loadi(50)
              , loadi(150)
              , compute(black)
              , compute(prependl)
              , loadf((float)(0.5))
              , loadi(50)
              , loadi(150)
              , compute(grey)
              , compute(prependl)
              , loadi(50)
              , loadi(150)
              , compute(white)
              , compute(prependl)
              , compute(mergeVertical)
              , loads("mergeV.pgm")
              , svc(store)
              , pop()/**/
              /**/, loads("merge pictures horizontal")
              , svc(writeln)
              , pop()
              , emptyl()
              , loadi(150)
              , loadi(50)
              , compute(black)
              , compute(prependl)
              , loadf((float)(0.5))
              , loadi(150)
              , loadi(50)
              , compute(grey)
              , compute(prependl)
              , loadi(150)
              , loadi(50)
              , compute(white)
              , compute(prependl)
              , compute(mergeHorizontal)
              , loads("mergeH.pgm")
              , svc(store)
              , pop()/**/
              , loads("grey with black and white")
              , svc(writeln)
              , pop()
              , loadi(1)
              , loadi(1)
              , compute(black)
              , dup()
              , dup()
              , store(absAddr,2)
              , compute(invert)
              , compute(sideBySide)
              , dup()
              , dup()
              , store(absAddr,2)
              , compute(invert)
              , compute(above)
              , dup()
              , store(absAddr,2)
              , load(absAddr,0)
              , compute(width)
              , loadi(2)
              , compute(divi)
              , load(absAddr,0)
              , compute(height)
              , loadi(2)
              , compute(divi)
              , compute(replicate)
              , loads("greyWithBlackAndWhite.pgm")
              , svc(store)
              , pop()
              , loads("resize in 1 step")
              , svc(writeln)
              , pop()
              , load(absAddr,2)
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(height)
              , compute(resize)
              , loads("resizeIn1Step.pgm")
              , svc(store)
              , pop()
              , loads("resize by factor 1.5 in many steps")
              , svc(writeln)
              , pop()
              , load(absAddr,2)
              , store(absAddr,3)
              , load(absAddr,0)
              , compute(width)
              , load(absAddr,0)
              , compute(height)
              , store(absAddr,5)
              , store(absAddr,4)
              , load(absAddr,3)
              , compute(width)
              , load(absAddr,3)
              , compute(height)
              , store(absAddr,7)
              , store(absAddr,6)
              , jump(33)
              , load(absAddr,6)
              , load(absAddr,6)
              , loadi(2)
              , compute(divi)
              , compute(addi)
              , load(absAddr,4)
              , compute(mini)
              , load(absAddr,7)
              , load(absAddr,7)
              , loadi(2)
              , compute(divi)
              , compute(addi)
              , load(absAddr,5)
              , compute(mini)
              , store(absAddr,7)
              , store(absAddr,6)
              , loads("resize to ")
              , load(absAddr,6)
              , compute(i2s)
              , compute(concs)
              , loads("x")
              , compute(concs)
              , load(absAddr,7)
              , compute(i2s)
              , compute(concs)
              , svc(writeln)
              , pop()
              , load(absAddr,3)
              , load(absAddr,6)
              , load(absAddr,7)
              , compute(resize)
              , store(absAddr,3)
              , load(absAddr,6)
              , load(absAddr,4)
              , compute(eqi)
              , branch(true,5)
              , load(absAddr,7)
              , load(absAddr,5)
              , compute(eqi)
              , branch(false,-39)
              , load(absAddr,3)
              , loads("resizeInSmallSteps.pgm")
              , svc(store)
              , pop()
              , undef()
              , store(absAddr,3)
              , undef()
              , store(absAddr,4)
              , undef()
              , store(absAddr,5)
              , undef()
              , store(absAddr,6)
              , undef()
              , store(absAddr,7)
              , undef()
              , store(absAddr,2)
              , loads("add 2 pictures")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(mean)
              , loads("add.pgm")
              , svc(store)
              , pop()
              , loads("add mean arithmetic mean: + is equivalent to mean")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(mean)
              , loads("mean.pgm")
              , svc(store)
              , pop()
              , loads("inverse operation for mean is inverseMean")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(mean)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(inverseMean)
              , loads("meanInvMean.pgm")
              , svc(store)
              , pop()
              , loads("subtract 2 pictures")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(diff)
              , loads("sub.pgm")
              , svc(store)
              , pop()
              , loads("- is same as diff")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(diff)
              , loads("diff.pgm")
              , svc(store)
              , pop()
              , loads("inverseDiff is inverse Function to - or diff")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(diff)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(inverseDiff)
              , loads("diffInvDiff.pgm")
              , svc(store)
              , pop()
              , loads("multiply 2 pictures")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(mulp)
              , loads("mul.pgm")
              , svc(store)
              , pop()
              , loads("minimum of 2 pictures")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(minp)
              , loads("min.pgm")
              , svc(store)
              , pop()
              , loads("maximum of 2 pictures")
              , svc(writeln)
              , pop()
              , load(absAddr,0)
              , load(absAddr,0)
              , compute(flipVertical)
              , compute(maxp)
              , loads("max.pgm")
              , svc(store)
              , pop()
              , loads("good bye")
              , svc(writeln)
              , pop()
              , undef()
              , store(absAddr,0)
              , undef()
              , store(absAddr,1)
              , compute(terminate)
              }
             , 8
             );
        }
    }
